<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>cursor_bouncer_sprt</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Saving old limit values
prev_limit_crystal = global.limit_crystal;
prev_limit_spinning_mine = global.limit_spinning_mine;
prev_limit_spin_crystal = global.limit_spin_crystal;
prev_limit_mine = global.limit_mine;
prev_dark_limit = global.dark_crystal_limit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setting new limit values according to the score
if(score&lt;2000)
{
    global.limit_crystal = 2;
    global.limit_spinning_mine = 0;
    global.limit_spin_crystal = 0;
    global.limit_mine = 1;
    global.dark_crystal_limit = 0;
}

else if(score&lt;5000)
{
    global.limit_crystal = 3;
    global.limit_spinning_mine = 1;
    global.limit_spin_crystal = 0;
    global.limit_mine = 2;
    global.dark_crystal_limit = 1;
}

else
{
   global.limit_crystal = 3;
   global.limit_spinning_mine = 1;
   global.limit_spin_crystal = 1;
   global.limit_mine = 3;
   global.dark_crystal_limit = 1;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///First, follow the player
follow = true;
alarm[0] = room_speed*2;
inst = noone;//The ID of the bouncer that was just created
global.choice=-1;
//reached = false;//The object reached (x0,y0)

//The coordinates of the spawn point of the bouncer
x0 = -1;
y0 = -1;

set = false;//The coordinates of the spawn point of the bouncer have been set

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restoring old limit values
global.limit_crystal = prev_limit_crystal;
global.limit_spinning_mine = prev_limit_spinning_mine;
global.limit_spin_crystal = prev_limit_spin_crystal;
global.limit_mine = prev_limit_mine;
global.dark_crystal_limit = prev_dark_limit;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>follow</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(follow)
    move_towards_point(SSGM.x,SSGM.y,SSGM.speed);
    
else if(!set)
{
    set = true;
    global.choice=irandom(3);
    if(global.choice==0)//Upper right corner
    {
        x0 = room_width-sprite_get_width(cursor_bouncer_sprt)/2-1;
        y0 = 90;
    }   
    else if(global.choice==1)//Upper left corner
    {
        x0 = sprite_get_width(cursor_bouncer_sprt)/2+1;
        y0 = 90;
    }
    else if(global.choice==2)//Lower left corner
    {
        x0 = sprite_get_width(cursor_bouncer_sprt)/2+1;
        y0 = room_height-92;
    }
    else if(global.choice==3)//Lower right corner
    {
        x0 = room_width-sprite_get_width(cursor_bouncer_sprt)/2-1;
        y0 = room_height-92;
    }
    move_towards_point(x0,y0,12);
}

else if(set &amp;&amp; x==x0 &amp;&amp; y==y0 &amp;&amp; instance_number(ping_pong_obj)&lt;1)//Create the bouncer
{
    speed = 0;
    if(x&gt;room_width/2)//Right side
        inst=instance_create(x+100,y,ping_pong_obj); 
    else//Left side
        inst=instance_create(x-100,y,ping_pong_obj);   
}

    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ping_pong_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(other==inst)
    visible = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Making sure the cursor will be at (x0,y0) after it's done following the player
if(!follow)
{
    if(x&lt;0 || x&gt;room_width)
    {
        x = x0;
        y = y0;
    }
    if(y&lt;0 || y&gt;room_height)
    {
        x = x0;
        y = y0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
